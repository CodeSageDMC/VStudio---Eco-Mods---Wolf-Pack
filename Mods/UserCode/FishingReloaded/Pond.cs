// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
     using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Occupancy;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
	using Eco.Gameplay.Components.Storage;
    using Eco.Shared.View;
    using Eco.Shared.Networking;
    using Eco.Shared.Items;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(MinimapComponent))]
    [RequireComponent(typeof(LinkComponent))]
    [RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(HousingComponent))]
    [RequireComponent(typeof(OccupancyRequirementComponent))]
    [RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [Tag("Usable")]
    [Ecopedia("Work Stations", "Craft Tables", subPageName: "Aquatic Pond")]
    public partial class PondObject : WorldObject, IRepresentsItem
    {
       public virtual Type RepresentedItemType => typeof(PondItem);
       public override LocString DisplayName => Localizer.DoStr("Aquatic Pond");
       public override TableTextureMode TableTexture => TableTextureMode.Wood;
	   
       static PondObject()
        {
            var BlockOccupancyList = new List<BlockOccupancy>
            {
            new BlockOccupancy(new Vector3i(0, 0, 0)),
			new BlockOccupancy(new Vector3i(1, 0, 0)),
			new BlockOccupancy(new Vector3i(2, 0, 0)),
            new BlockOccupancy(new Vector3i(0, 0, 1)),
			new BlockOccupancy(new Vector3i(1, 0, 1)),
			new BlockOccupancy(new Vector3i(2, 0, 1)),
            new BlockOccupancy(new Vector3i(0, 0, 2)),
			new BlockOccupancy(new Vector3i(1, 0, 2)),
			new BlockOccupancy(new Vector3i(2, 0, 2)),
            new BlockOccupancy(new Vector3i(0, 1, 0)),
			new BlockOccupancy(new Vector3i(1, 1, 0)),
			new BlockOccupancy(new Vector3i(2, 1, 0)),
            new BlockOccupancy(new Vector3i(0, 1, 1)),
			new BlockOccupancy(new Vector3i(1, 1, 1)),
			new BlockOccupancy(new Vector3i(2, 1, 1)),
            new BlockOccupancy(new Vector3i(0, 1, 2)),
			new BlockOccupancy(new Vector3i(1, 1, 2)),
			new BlockOccupancy(new Vector3i(2, 1, 2)),
            };

            AddOccupancy<PondObject>(BlockOccupancyList);
        }
		
        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<MinimapComponent>().SetCategory(Localizer.DoStr("Crafting"));
            this.ModsPostInitialize();
        }    
        /// <summary>Hook for mods to customize WorldObject before initialization. You can change housing values here.</summary>
        partial void ModsPreInitialize();
        /// <summary>Hook for mods to customize WorldObject after initialization.</summary>
        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Aquatic Pond")]
    [LocDescription("A pond to raise fish.")]
    [IconGroup("World Object Minimap")]
    [Tag("Crafting Table")]
    [Ecopedia("Housing Objects", "Kitchen", createAsSubPage: true)]
    [AllowPluginModules(Tags = new[] { "BasicUpgrade" }, ItemTypes = new[] { typeof(HuntingUpgradeItem) })] //noloc
    public partial class PondItem : WorldObjectItem<PondObject>, IPersistentData
    {
        protected override OccupancyContext GetOccupancyContext => new SideAttachedContext( 0  | DirectionAxisFlags.Down , WorldObject.GetOccupancyInfo(this.WorldObjectType));



        [Serialized, SyncToView, NewTooltipChildren(CacheAs.Instance, flags: TTFlags.AllowNonControllerTypeForChildren)] public object PersistentData { get; set; }
    }
	
    [RequiresSkill(typeof(LoggingSkill), 4)]
    public partial class PondRecipe : RecipeFamily
    {
        public PondRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "AquaticPond", 
                displayName: Localizer.DoStr("Aquatic Pond"),

                ingredients: new List<IngredientElement>
                {
                    new IngredientElement("HewnLog", 10, typeof(LoggingSkill)),
                    new IngredientElement("WoodBoard", 6, typeof(LoggingSkill)), //noloc
                },

                items: new List<CraftingElement>
                {
                    new CraftingElement<PondItem>(1)
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 2; 
            
            this.LaborInCalories = CreateLaborInCaloriesValue(300, typeof(LoggingSkill));

            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(PondRecipe), start: 4, skillType: typeof(LoggingSkill));

            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Aquatic Pond"), recipeType: typeof(PondRecipe));
            this.ModsPostInitialize();

            CraftingComponent.AddRecipe(tableType: typeof(CarpentryTableObject), recipe: this);
        }
        partial void ModsPreInitialize();
        partial void ModsPostInitialize();

    }

}
