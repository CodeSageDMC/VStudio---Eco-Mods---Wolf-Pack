// Copyright (c) Strange Loop Games. All rights reserved.
// See LICENSE file in the project root for full license information.
// <auto-generated from WorldObjectTemplate.tt />

namespace Eco.Mods.TechTree
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Core.Items;
    using Eco.Gameplay.Blocks;
    using Eco.Gameplay.Components;
    using Eco.Gameplay.Components.Auth;
    using Eco.Gameplay.DynamicValues;
    using Eco.Gameplay.Economy;
    using Eco.Gameplay.Housing;
    using Eco.Gameplay.Interactions;
    using Eco.Gameplay.Items;
    using Eco.Gameplay.Modules;
    using Eco.Gameplay.Minimap;
    using Eco.Gameplay.Objects;
    using Eco.Gameplay.Players;
    using Eco.Gameplay.Property;
    using Eco.Gameplay.Skills;
    using Eco.Gameplay.Systems;
    using Eco.Gameplay.Systems.TextLinks;
    using Eco.Gameplay.Pipes.LiquidComponents;
    using Eco.Gameplay.Pipes.Gases;
    using Eco.Shared;
    using Eco.Shared.Math;
    using Eco.Shared.Localization;
    using Eco.Shared.Serialization;
    using Eco.Shared.Utils;
    using Eco.Shared.View;
    using Eco.Shared.Items;
    using Eco.Shared.Networking;
    using Eco.Gameplay.Pipes;
    using Eco.World.Blocks;
    using Eco.Gameplay.Housing.PropertyValues;
    using Eco.Gameplay.Civics.Objects;
    using Eco.Gameplay.Settlements;
    using Eco.Gameplay.Systems.NewTooltip;
    using Eco.Core.Controller;
    using Eco.Core.Utils;
	using Eco.Gameplay.Components.Storage;
    using static Eco.Gameplay.Housing.PropertyValues.HomeFurnishingValue;
    using Eco.Gameplay.Items.Recipes;

    [Serialized]
    [RequireComponent(typeof(OnOffComponent))]
    [RequireComponent(typeof(PropertyAuthComponent))]
    [RequireComponent(typeof(LinkComponent))]
	[RequireComponent(typeof(CraftingComponent))]
    [RequireComponent(typeof(HousingComponent))]
	[RequireComponent(typeof(PluginModulesComponent))]
    [RequireComponent(typeof(ForSaleComponent))]
    [RequireComponent(typeof(RoomRequirementsComponent))]
    [RequireRoomContainment]
    [RequireRoomVolume(2)]
    [Tag("Usable")]
    [Ecopedia("Housing Objects", "Kitchen", subPageName: "Mortar and pestle Item")]
    public partial class MortarAndPestleObject : WorldObject, IRepresentsItem
    {
        public virtual Type RepresentedItemType => typeof(MortarAndPestleItem);
        public override LocString DisplayName => Localizer.DoStr("Mortar and pestle");

        protected override void Initialize()
        {
            this.ModsPreInitialize();
            this.GetComponent<HousingComponent>().HomeValue = MortarAndPestleItem.homeValue;
            this.ModsPostInitialize();
        }

        partial void ModsPreInitialize();

        partial void ModsPostInitialize();
    }

    [Serialized]
    [LocDisplayName("Mortar and pestle")]
    [LocDescription("A mortar and pestle for grinding spices.")]
	[IconGroup("World Object Minimap")]
    [Ecopedia("Housing Objects", "Kitchen", createAsSubPage: true)]
    [Tag("Housing")]
    [Weight(500)] // Defines how heavy MortarAndPestle is.
	[MaxStackSize(200)]
	[AllowPluginModules(Tags = new[] { "BasicUpgrade" }, ItemTypes = new[] { typeof(CampfireCookingUpgradeItem) })] //noloc
    public partial class MortarAndPestleItem : WorldObjectItem<MortarAndPestleObject>
    {
        public override HomeFurnishingValue HomeValue => homeValue;
        public static readonly HomeFurnishingValue homeValue = new HomeFurnishingValue()
        {
            ObjectName                              = typeof(MortarAndPestleObject).UILink(),
            Category                                = HousingConfig.GetRoomCategory("Kitchen"),
            BaseValue                               = 2f,
            TypeForRoomLimit                        = Localizer.DoStr("Food Preparation"),
            DiminishingReturnMultiplier                = 0.5f
            
        };
		
    }


    [RequiresSkill(typeof(MasonrySkill), 2)]
    [Ecopedia("Housing Objects", "Kitchen", subPageName: "Mortar and pestle Item")]
    public partial class MortarAndPestleRecipe : RecipeFamily
    {
        public MortarAndPestleRecipe()
        {
            var recipe = new Recipe();
            recipe.Init(
                name: "Mortarandpestle",  //noloc
                displayName: Localizer.DoStr("Mortar and pestle"),

                ingredients: new List<IngredientElement>
                {

                 new IngredientElement(typeof(GraniteItem), 10, true),
                },

                items: new List<CraftingElement>
                {
                    new CraftingElement<MortarAndPestleItem>()
                });
            this.Recipes = new List<Recipe> { recipe };
            this.ExperienceOnCraft = 30f; // Defines how much experience is gained when crafted.
            
            // Defines the amount of labor required and the required skill to add labor

            this.LaborInCalories = CreateLaborInCaloriesValue(50, typeof(MasonrySkill));

            // Defines our crafting time for the recipe

            this.CraftMinutes = CreateCraftTimeValue(beneficiary: typeof(MortarAndPestleRecipe), start: 5, skillType: typeof(MasonrySkill), typeof(MasonryFocusedSpeedTalent), typeof(MasonryParallelSpeedTalent));

            // Perform pre/post initialization for user mods and initialize our recipe instance with the display name "MortarAndPestle"
            this.ModsPreInitialize();
            this.Initialize(displayText: Localizer.DoStr("Mortar and pestle"), recipeType: typeof(MortarAndPestleRecipe));
            this.ModsPostInitialize();

            // Register our RecipeFamily instance with the crafting system so it can be crafted.

            CraftingComponent.AddRecipe(tableType: typeof(MasonryTableObject), recipe: this);
        }

        /// <summary>Hook for mods to customize RecipeFamily before initialization. You can change recipes, xp, labor, time here.</summary>
        partial void ModsPreInitialize();

        /// <summary>Hook for mods to customize RecipeFamily after initialization, but before registration. You can change skill requirements here.</summary>
        partial void ModsPostInitialize();
    }
}
